{"version":3,"sources":["images/starship1.jpeg","images/starship2.png","images/starship3.jpeg","images/starship4.jpg","images/starship5.jpeg","images/starship6.jpeg","images/starship7.jpeg","images/starship8.jpeg","images/starship9.jpg","images/starship10.jpeg","components/ScoreNav.jsx","components/card/CardHeader.jsx","images/index.js","components/card/CardImage.jsx","constants/constants.js","components/card/CardAttributeRow.jsx","constants/attributes.js","components/card/CardAttributeList.jsx","components/card/Card.jsx","components/card/SelectedAttribute.jsx","components/card/CardContainer.jsx","components/GamePanel.jsx","components/common/Button.jsx","components/ControlNav.jsx","App.jsx","utils/shuffleArray.js","index.js"],"names":["ScoreNav","player1Score","player2Score","className","CardHeader","props","title","model","manufacturer","require","default","CardImage","src","images","image","alt","STATUS_READY","STATUS_OVER","STATUS_REPLAY","PLAYER_1","PLAYER_2","CardAttributeRow","handleAttributeClick","attributeKey","this","label","value","status","selectedAttribute","attributeValue","onClick","Component","cost_in_credits","length","max_atmosphering_speed","crew","passengers","cargo_capacity","CardAttributeList","card","handleAttributeSelection","attributeListItems","Object","keys","attributes","map","Card","isClosed","isWinner","name","SelectedAttribute","CardContainer","GamePanel","player1Card","player2Card","lastWinner","isDraw","Button","buttonClassName","buttonOnClick","buttonLabel","buttonIsDisabled","disabled","defaultProps","ControlNav","isPlayEnabled","handleButtonClick","App","useState","firstRender","game","setGame","useSWR","fetch","then","res","json","result","data","error","handleGameOver","useCallback","handleResetGame","console","log","values","ImagesData","results","array","i","j","Math","floor","random","shuffleArray","item","index","halfLength","ceil","undefined","deck1","slice","deck2","winner","useEffect","willGameEnd","handlePlay","card1","card2","attribute1","parseInt","attribute2","newGame","topTrump","handleShuffle","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.75e3222e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/starship1.3dbe3b22.jpeg\";","export default __webpack_public_path__ + \"static/media/starship2.377c9747.png\";","export default __webpack_public_path__ + \"static/media/starship3.b0efd96d.jpeg\";","export default __webpack_public_path__ + \"static/media/starship4.879dcff1.jpg\";","export default __webpack_public_path__ + \"static/media/starship5.a52e66e7.jpeg\";","export default __webpack_public_path__ + \"static/media/starship6.8ad97078.jpeg\";","export default __webpack_public_path__ + \"static/media/starship7.d6b6a40b.jpeg\";","export default __webpack_public_path__ + \"static/media/starship8.063e29ee.jpeg\";","export default __webpack_public_path__ + \"static/media/starship9.80f50005.jpg\";","export default __webpack_public_path__ + \"static/media/starship10.3281fb99.jpeg\";","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst ScoreNav = ({ player1Score, player2Score }) => (\n  <div className=\"score-nav\">\n    <div className=\"player-scores\">\n      <div><span className=\"player-score\">{player1Score}</span></div>\n      <div><span className=\"player-score\">{player2Score}</span></div>\n    </div>\n  </div>\n);\n\nScoreNav.propTypes = {\n  player1Score: PropTypes.number.isRequired,\n  player2Score: PropTypes.number.isRequired,\n};\n\nexport default ScoreNav;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst CardHeader = (props) => {\n  const {\n    title,\n    model,\n    manufacturer,\n  } = props;\n\n  return (\n    <div className=\"card-header\">\n      <h3>{title}</h3>\n      <div className=\"card-additional-info\">\n        <div>Model: {model}</div>\n        <div>Manufacturer: {manufacturer}</div>\n      </div>\n    </div>\n  );\n}\n\nCardHeader.propTypes = {\n  title: PropTypes.string.isRequired,\n  model: PropTypes.string.isRequired,\n  manufacturer: PropTypes.string.isRequired,\n}\n\nexport default CardHeader;\n","/*\neslint-disable\n */\nexport default {\n  ['starship1.jpeg']: require('./starship1.jpeg').default,\n  ['starship2.png']: require('./starship2.png').default,\n  ['starship3.jpeg']: require('./starship3.jpeg').default,\n  ['starship4.jpg']: require('./starship4.jpg').default,\n  ['starship5.jpeg']: require('./starship5.jpeg').default,\n  ['starship6.jpeg']: require('./starship6.jpeg').default,\n  ['starship7.jpeg']: require('./starship7.jpeg').default,\n  ['starship8.jpeg']: require('./starship8.jpeg').default,\n  ['starship9.jpg']: require('./starship9.jpg').default,\n  ['starship10.jpeg']: require('./starship10.jpeg').default\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport images from '../../images/index';\n\nconst CardImage = (props) => (\n  <div className=\"card-image-container\">\n    <img src={images[props.image]} className=\"card-image\" alt=\"\" />\n  </div>\n);\n\nCardImage.propTypes = {\n  image: PropTypes.string.isRequired,\n}\n\nexport default CardImage;\n","export const STATUS_READY = 'ready';\nexport const STATUS_DONE = 'done';\nexport const STATUS_OVER = 'over';\nexport const STATUS_REPLAY = 'replay';\nexport const PLAYER_1 = 'player1';\nexport const PLAYER_2 = 'player2';\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { STATUS_READY } from '../../constants/constants';\n\nclass CardAttributeRow extends Component {\n  static propTypes = {\n    attributeKey: PropTypes.string.isRequired,\n    label: PropTypes.string.isRequired,\n    value: PropTypes.string.isRequired,\n    handleAttributeClick: PropTypes.func.isRequired,\n  }\n\n  handleAttributeClick = () => {\n    this.props.handleAttributeClick(this.props.attributeKey);\n  }\n\n  render() {\n    const {\n      attributeKey,\n      label,\n      value,\n      status,\n      selectedAttribute,\n    } = this.props;\n\n    const attributeValue = status === STATUS_READY ? (\n      <div\n        className={`card-attribute-value ${selectedAttribute === attributeKey && 'selected'}`}\n        onClick={this.handleAttributeClick}\n      >{value}</div>\n    ) : (\n      <span\n        className={`card-attribute-value ${selectedAttribute === attributeKey && 'selected'}`}\n      >{value}</span>);\n\n    return (\n      <div \n      className=\"card-attribute-row\"\n      onClick={this.handleAttributeClick}\n      >\n        <span className={`card-attribute-label ${selectedAttribute === attributeKey && 'selected'}`}>\n          {label}:\n        </span>\n        {attributeValue}\n      </div>\n    );\n  }\n}\n\nexport default CardAttributeRow;\n","export default {\n  cost_in_credits: \"Cost\",\n  length: \"Length\",\n  max_atmosphering_speed: \"Speed\",\n  crew: \"Crew\",\n  passengers: \"Passengers\",\n  cargo_capacity: \"Cargo Capacity\",\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport CardAttributeRow from './CardAttributeRow';\nimport attributes from '../../constants/attributes';\n\nconst CardAttributeList = (props) => {\n  const {\n    card,\n    handleAttributeSelection,\n    status,\n    selectedAttribute,\n  } = props;\n\n  const attributeListItems = Object.keys(attributes).map((attributeKey) => {\n    return (\n    <CardAttributeRow\n      key={`attribute-${attributeKey}`}\n      attributeKey={attributeKey}\n      label={attributes[attributeKey]}\n      value={card[attributeKey]}\n      handleAttributeClick={handleAttributeSelection}\n      selectedAttribute={selectedAttribute}\n      status={status}\n    />\n    );\n  });\n\n  return (\n    <div className=\"card-attribute-list\">\n      {attributeListItems}\n    </div>\n  );\n}\n\nCardAttributeList.propTypes = {\n  card: PropTypes.object.isRequired,\n  handleAttributeSelection: PropTypes.func.isRequired,\n  status: PropTypes.string.isRequired,\n}\n\nexport default CardAttributeList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport CardHeader from './CardHeader';\nimport CardImage from './CardImage';\nimport CardAttributeList from './CardAttributeList';\n\nconst Card = (props) => {\n  const {\n    isClosed,\n    card,\n    handleAttributeSelection,\n    status,\n    selectedAttribute,\n    isWinner\n  } = props;\n\n  return (\n    <div className={`card ${isClosed && 'closed'}`}>\n      {!isClosed ? (\n        <div className=\"card-body\">\n          <CardHeader\n            title={card.name}\n            model={card.model}\n            manufacturer={card.manufacturer}\n          />\n          <CardImage\n            image={card.image}\n          />\n          <CardAttributeList\n            card={card}\n            handleAttributeSelection={handleAttributeSelection}\n            status={status}\n            selectedAttribute={selectedAttribute}\n            isWinner={isWinner}\n          />\n        </div>\n      ) : null}\n    </div>\n  );\n}\n\nCard.propTypes = {\n  isClosed: PropTypes.bool.isRequired,\n  card: PropTypes.object.isRequired,\n  handleAttributeSelection: PropTypes.func.isRequired,\n  status: PropTypes.string.isRequired,\n}\n\nexport default Card;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport attributes from '../../constants/attributes';\n\nconst SelectedAttribute = (props) => {\n  const { \n    selectedAttribute,\n    attributeValue,\n    isClosed,\n    isWinner\n  } = props;\n  return selectedAttribute && isClosed ? (\n    <div className=\"selected-attribute\">\n    {isWinner ?\n      <span className=\"badge badge-success\">{attributes[selectedAttribute]}:\n    {attributeValue}</span> :\n     <span>    {attributes[selectedAttribute]}:\n    {attributeValue}</span>\n    }\n    </div>\n  ) : (\n    <div className=\"selected-attribute\">Select an attribute</div>\n  );\n}\n\nSelectedAttribute.propTypes = {\n  selectedAttribute: PropTypes.string,\n  attributeValue: PropTypes.string,\n}\n\nexport default SelectedAttribute;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Card from './Card';\nimport SelectedAttribute from './SelectedAttribute';\n\nconst CardContainer = (props) => {\n  const {\n    card,\n    isClosed,\n    isWinner,\n    selectedAttribute,\n    handleAttributeSelection,\n    status,\n  } = props;\n\n  return (\n    <div className={`card-container ${isWinner && 'winner'}`}>\n      <Card \n        card={card}\n        isClosed={isClosed}\n        handleAttributeSelection={handleAttributeSelection}\n        status={status}\n        selectedAttribute={selectedAttribute}\n      />\n      {!isClosed ? (\n      <SelectedAttribute\n        selectedAttribute={selectedAttribute}\n        attributeValue={card[selectedAttribute]}\n        isClosed\n        isWinner={isWinner}\n      />\n      ) : null}\n      <div className=\"card-result\">You won!</div>\n    </div>\n  );\n}\n\nCardContainer.propTypes = {\n  card: PropTypes.object.isRequired,\n  isClosed: PropTypes.bool.isRequired,\n  isWinner: PropTypes.bool.isRequired,\n  status: PropTypes.string.isRequired,\n  selectedAttribute: PropTypes.string,\n  handleAttributeSelection: PropTypes.func.isRequired,\n}\n\nexport default CardContainer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport CardContainer from './card/CardContainer';\nimport {\n  STATUS_READY,\n  STATUS_OVER,\n  PLAYER_1,\n  PLAYER_2,\n} from '../constants/constants';\n\nconst GamePanel = (props) => {\n  const {\n    player1Card,\n    player2Card,\n    status,\n    handleAttributeSelection,\n    selectedAttribute,\n    lastWinner,\n    isDraw,\n  } = props;\n\n  return (\n    <div className=\"game-panel\">\n      { status === STATUS_OVER && (\n        <div className=\"game-nav-result\">Game Over</div>\n      )}\n      { isDraw && (\n        <div className=\"game-nav-result\">Draw</div>\n      )}\n      <CardContainer\n        card={player1Card}\n        isClosed={status === STATUS_READY && lastWinner === PLAYER_2}\n        handleAttributeSelection={handleAttributeSelection}\n        selectedAttribute={selectedAttribute}\n        status={status}\n        isWinner={status !== STATUS_READY && lastWinner === PLAYER_1 && !isDraw}\n      />\n      <CardContainer \n        card={player2Card}\n        isClosed={status === STATUS_READY && lastWinner !== PLAYER_2}\n        handleAttributeSelection={handleAttributeSelection}\n        selectedAttribute={selectedAttribute}\n        status={status}\n        isWinner={status !== STATUS_READY && lastWinner === PLAYER_2 && !isDraw}\n      />\n    </div>\n  );\n}\n\nGamePanel.propTypes = {\n  status: PropTypes.string.isRequired,\n  player1Card: PropTypes.object,\n  player2Card: PropTypes.object,\n  lastWinner: PropTypes.string,\n  selectedAttribute: PropTypes.string,\n  handleAttributeSelection: PropTypes.func.isRequired,\n}\n\nexport default GamePanel;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Button = (props) => {\n  const {\n    buttonClassName,\n    buttonOnClick,\n    buttonLabel,\n    buttonIsDisabled,\n  } = props;\n\n  return (\n    <button\n      className={`btn ${buttonClassName} ${buttonIsDisabled && 'disabled'}`}\n      onClick={buttonOnClick}\n      disabled={buttonIsDisabled}\n    >\n      {buttonLabel}\n    </button>\n  );\n};\n\nButton.propTypes = {\n  buttonClassName: PropTypes.string,\n  buttonOnClick: PropTypes.func,\n  buttonLabel: PropTypes.string,\n  buttonIsDisabled: PropTypes.bool,\n};\n\nButton.defaultProps = {\n  buttonClassName: '',\n  buttonOnClick: () => {},\n  buttonLabel: '',\n  buttonIsDisabled: true,\n};\n\nexport default Button;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from './common/Button';\nimport { STATUS_READY, STATUS_OVER } from '../constants/constants';\n\nconst ControlNav = (props) => { \n  const {\n    status,\n    isPlayEnabled,\n    handleButtonClick,\n  } = props;\n\n  let buttonLabel;\n  switch(status) {\n    case STATUS_READY:\n      buttonLabel = 'Play';\n      break;\n    case STATUS_OVER:\n      buttonLabel = 'Play Again';\n      break;\n    default:\n      buttonLabel = 'Shuffle';\n  }\n\n  return (\n    <div className=\"control-nav\">\n      <Button\n        buttonClassName={status === STATUS_READY ? 'dark' : 'top-trump'}\n        buttonOnClick={handleButtonClick}\n        buttonLabel={buttonLabel}\n        buttonIsDisabled={!isPlayEnabled}\n      />\n    </div>\n  );\n}\n\nControlNav.propTypes = {\n  status: PropTypes.string.isRequired,\n  isPlayEnabled: PropTypes.bool.isRequired,\n  handleButtonClick: PropTypes.func.isRequired,\n};\n\nexport default ControlNav;\n","import React, { useEffect, useState, useCallback, Fragment } from 'react';\nimport ScoreNav from './components/ScoreNav';\nimport GamePanel from './components/GamePanel';\nimport ControlNav from './components/ControlNav';\nimport shuffleArray from './utils/shuffleArray';\nimport ImagesData from './data/images.json';\nimport useSWR from \"swr\";\nimport {\n  STATUS_READY,\n  STATUS_DONE,\n  STATUS_OVER,\n  STATUS_REPLAY,\n  PLAYER_1,\n  PLAYER_2,\n} from './constants/constants';\nimport './App.scss';\n\nconst url = \"https://swapi.dev/api/vehicles/\";\n\nfunction App () {\n  const [game, setGame] = useState({firstRender: true});\n  const fetcher = (...args) => fetch(...args).then((res) => res.json());\n  const { data: result, error } = useSWR(url, fetcher);\n\n  const handleGameOver = useCallback(() => {\n    if(game.status === \"over\" && !game.firstRender) {\n      setGame({...game, status: STATUS_REPLAY});\n    }\n  },[game]);\n\n  const handleResetGame = useCallback(() => {\n    if (game.firstRender || game.status === STATUS_REPLAY) {\n      if (error) {\n        console.log(\"Something went wrong\");\n      } else if (!result) {\n        console.log(\"Loading...\");\n      } else {\n        const images = Object.values(ImagesData.images);\n        const resultAddedImgs = result.results.map((item,index) => {\n          return {...item, image:Object.values(images[index])[0]};\n        });\n        const results = shuffleArray(resultAddedImgs);\n        const halfLength = Math.ceil(results.length / 2);\n        setGame({\n          status: STATUS_READY,\n          lastWinner: undefined,\n          deck1: results.slice(0, halfLength),\n          deck2: results.slice(halfLength),\n          selectedAttribute: undefined,\n          isDraw: false,\n          firstRender: false,\n          winner: undefined,\n        });\n      }\n    }\n     console.log(\"game in handleResetGame \", game);\n  }, [game, result, error]);\n\n  useEffect(() =>{\n     handleResetGame();\n  },[handleResetGame, game, game.winner]);\n\n  const handleAttributeSelection = (attributeKey) => {\n    setGame({\n      ...game,\n      selectedAttribute: attributeKey\n    })\n  }\n\n  const handleButtonClick= () => {\n    const card1 = game.deck1[0];\n    const card2 = game.deck2[0];\n    switch (game.status) {\n      case STATUS_OVER:\n        handleGameOver();\n        break;\n      case STATUS_REPLAY:\n        handleResetGame();\n        break;\n      case STATUS_READY:\n        handlePlay(card1, card2);\n        break;\n      default:\n        handleShuffle(card1, card2);\n    }\n    console.log(\"game in handleButtonClick \", game);\n  }\n\n  const willGameEnd = (game) => {\n    return !game.isDraw && \n      ((game.lastWinner === PLAYER_1 && game.deck2.length === 1) ||\n      (game.lastWinner === PLAYER_2 && game.deck1.length === 1));\n  }\n\n  const handlePlay = (card1, card2) => {\n    const attribute1 = parseInt(card1[game.selectedAttribute], 10);\n    const attribute2 = parseInt(card2[game.selectedAttribute], 10);\n    let newGame = {};\n\n    if (card1.topTrump || attribute1 > attribute2) {\n      newGame = {...game, lastWinner: PLAYER_1 };\n    } else if (card2.topTrump || attribute1 < attribute2) {\n      newGame = {...game, lastWinner: PLAYER_2 };\n    } else {\n      newGame = {...game, isDraw: true };\n    }\n    console.log(\"game in handlePlay willGameEnd() \", willGameEnd(newGame));\n    console.log(\"game in handlePlay newGame.isDraw \", newGame.isDraw);\n    newGame = {...newGame, status: willGameEnd(newGame) ? STATUS_OVER : STATUS_DONE };\n    setGame({\n      ...newGame\n      });\n      console.log(\"game in handlePlay \", game);\n  }\n\n  const handleShuffle= (card1, card2) => {\n    const newGame = {\n      ...game,\n      status: STATUS_READY,\n      selectedAttribute: undefined,\n      isDraw: false,\n    };\n    if (game.isDraw) {\n      newGame.deck1 = [...game.deck1.slice(1), card1];\n      newGame.deck2 = [...game.deck2.slice(1), card2];\n    } else {\n      newGame.deck1 = [...game.deck1.slice(1), ...(game.lastWinner === PLAYER_1 ? [card1, card2] : [])];\n      newGame.deck2 = [...game.deck2.slice(1), ...(game.lastWinner === PLAYER_2 ? [card1, card2] : [])];\n    }\n    setGame({\n      ...game,\n      ...newGame\n    });\n    console.log(\"game in handleShuffle \", game);\n  }\n\n    return (\n      <div className=\"star-wars-top-trumps\">\n      {\n        game && game.deck1 && (\n        <Fragment>\n          <ScoreNav\n            player1Score={\n              game.status === \"over\" && game.deck1.length === 1 ?\n              0 : \n              game.status === \"over\" && game.deck1.length === 9 ?\n              10 :\n              game.deck1.length\n            }\n            player2Score={\n              game.status === \"over\" && game.deck2.length === 1 ?\n              0 : \n              game.status === \"over\" && game.deck2.length === 9 ?\n              10 :\n              game.deck2.length\n            }\n          />\n          {game.status === STATUS_OVER && (\n            <div className={`winner-box ${game.winner}`}>\n            {game.winner ===\"player1\" ? \n            <span>Player 1 won</span> :\n            <span>Player 2 won</span>\n            }\n            </div>\n          )}\n          <GamePanel\n            player1Card={game.deck1[0]}\n            player2Card={game.deck2[0]}\n            selectedAttribute={game.selectedAttribute}\n            status={game.status}\n            handleAttributeSelection={handleAttributeSelection}\n            lastWinner={game.lastWinner}\n            isDraw={game.isDraw}\n          />\n          <ControlNav\n            status={game.status}\n            isPlayEnabled={!!game.selectedAttribute}\n            handleButtonClick={handleButtonClick}\n          />\n        </Fragment>\n        )\n      }\n      </div>\n    );\n}\n\nexport default App;\n","/*\n  eslint-disable\n*/\nexport default function shuffleArray(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    let j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root')); // eslint-disable-line\n"],"sourceRoot":""}